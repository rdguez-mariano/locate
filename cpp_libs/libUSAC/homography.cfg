// example configuration file for fundamental matrix estimation

// ========================================================================================
// common RANSAC parameters

common =
{
	// ransac_conf: 0.0 - 1.0 (must be float)
	// specifies the confidence parameter
	ransac_conf = 0.99;

	// min_sample_size: int
	// number of points used to generate models
	min_sample_size = 4;
	
	// inlier_threshold: float
	// threshold for inlier classification
	inlier_threshold = 2.0;

	// max_hypotheses: int
	// maximum number of samples to be drawn before aborting
	max_hypotheses = 850000;
	
    // max_solutions_per_sample: int
	// number of possible solutions using the minimal sample
	max_solutions_per_sample = 1;

	// prevalidate_sample: true, false
	// specifies whether samples are to be prevalidated prior to model generation
	prevalidate_sample = true;

	// prevalidate_model: true, false
	// specifies whether models are to be prevalidated prior to verification against data points
	prevalidate_model = true;

	// degen_check: true, false
	// specifies whether degeneracy testing is to be performed
	degen_check = true;

	// random_sampling_method: UNIFORM, PROSAC (string)
	// specifies the type of random sampling to be used to generate hypotheses
	//random_sampling_method = "PROSAC";
	random_sampling_method = "UNIFORM";

	// verif_method: STANDARD, SPRT (string)
	// specifies the type of model verification to be performed
	verif_method = "SPRT";

	// local_opt: NO_LO, LOSAC (string)
	// specifies what type of local optimization is to be performed
	local_opt = "LOSAC";
};


// ========================================================================================
// PROSAC parameters

prosac = 
{
	// max_prosac_samples: int
	// number of samples after which PROSAC behaves like RANSAC
	max_prosac_samples = 500000;

	// beta: float
	// probability of incorrect model being support by a random data point
	// can be adapted to use values from sprt
	beta = 0.09;

	// min_stopping_length: int
	min_stopping_length = 20;

	// non_rand_conf: float
	// find non-minimal subset with probability of randomness smaller than (1-non_rand_conf)
	non_rand_conf = 0.99;

	// sorted_points_path: string
	// path to file containing indices of points sorted by quality scores
	sorted_points_path = "./sorting.txt";	
};					


// ========================================================================================
// SPRT parameters
					
sprt = 
{
	time_model = 100.0;

	models_per_sample = 1.0;

	delta = 0.01;

	epsilon = 0.2;	
};


// ========================================================================================
// Local optimization parameters
					
losac = 
{
	inner_sample_size = 12;

	inner_ransac_repetitions = 3;

	threshold_multiplier = 2.0;

	num_steps = 4;
};


// ========================================================================================
// Problem specific parameters

problem_specific =
{
	// path to file containing the (normalized) input points
	input_file_path = "./orig_pts.txt";	
};
